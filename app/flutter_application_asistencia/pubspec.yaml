# Nombre del proyecto Flutter
name: flutter_application_asistencia
# Descripción del proyecto
description: "A new Flutter project."

# La siguiente línea evita que el paquete se publique accidentalmente en pub.dev
# Esto es preferible para paquetes privados
publish_to: "none" # Remove this line if you wish to publish to pub.dev

# Las siguientes líneas definen la versión y el número de compilación de la aplicación
# Un número de versión es tres números separados por puntos, como 1.2.43
# seguido por un número de compilación opcional separado por un +
# Tanto el número de versión como el número de compilación pueden ser sobrescritos en Flutter
# build especificando --build-name y --build-number, respectivamente
# En Android, build-name se usa como versionName mientras que build-number se usa como versionCode
# Lee más sobre versionado en Android en https://developer.android.com/studio/publish/versioning
# En iOS, build-name se usa como CFBundleShortVersionString mientras que build-number se usa como CFBundleVersion
# Lee más sobre versionado en iOS en
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# En Windows, build-name se usa como las partes mayor, menor y patch
# de la versión del producto y archivo mientras que build-number se usa como el sufijo de compilación
version: 1.0.0+1

# Entorno de desarrollo requerido
environment:
  sdk: ^3.5.3  # Versión mínima del SDK de Dart requerida

# Dependencias especifican otros paquetes que tu paquete necesita para funcionar
# Para actualizar automáticamente las dependencias a las últimas versiones
# considera ejecutar `flutter pub upgrade --major-versions`. Alternativamente,
# las dependencias pueden ser actualizadas manualmente cambiando los números de versión abajo
# a la última versión disponible en pub.dev. Para ver qué dependencias tienen versiones más nuevas
# disponibles, ejecuta `flutter pub outdated`
dependencies:
  flutter:
    sdk: flutter  # Dependencia principal de Flutter
  shared_preferences: ^2.2.2  # Para almacenamiento local de preferencias
  http: ^0.13.6  # Para realizar solicitudes HTTP
  uuid: ^4.0.0  # Para generar identificadores únicos universales
  ##network_info_plus: ^4.1.0  # Versión anterior comentada
  network_info_plus: ^5.0.0  # Para obtener información de red (versión actualizada)
  wifi_scan: ^0.4.1+2  # Para escanear redes WiFi y obtener BSSID
  device_info_plus: ^9.0.0  # Para obtener información del dispositivo
  permission_handler: ^11.3.0  # Para manejar permisos de la aplicación

  # El siguiente paquete añade los iconos Cupertino a tu aplicación
  # Usa con la clase CupertinoIcons para iconos estilo iOS
  cupertino_icons: ^1.0.8  # Iconos estilo iOS
  awesome_dialog: ^3.2.1  # Para mostrar diálogos personalizados y atractivos

# Dependencias de desarrollo (solo para desarrollo, no incluidas en la app final)
dev_dependencies:
  flutter_test:
    sdk: flutter  # Para pruebas de la aplicación

  # El paquete "flutter_lints" abajo contiene un conjunto de recomendaciones de lints
  # para fomentar buenas prácticas de codificación. El conjunto de lints proporcionado por el paquete está
  # activado en el archivo `analysis_options.yaml` ubicado en la raíz de tu paquete
  # Ver ese archivo para información sobre desactivar reglas de lint específicas y activar adicionales
  flutter_lints: ^4.0.0  # Reglas de lint para análisis de código
  flutter_launcher_icons: ^0.13.1  # Para generar iconos de la aplicación

# Configuración para el paquete flutter_launcher_icons
flutter_launcher_icons:
  android: true  # Generar iconos para Android
  ios: true  # Generar iconos para iOS
  image_path: "assets/logos/seis.png"  # Ruta de la imagen base para los iconos

# Para información sobre la parte genérica de Dart de este archivo, ver la siguiente página:
# https://dart.dev/tools/pub/pubspec

# La siguiente sección es específica para paquetes Flutter
flutter:
  # La siguiente línea asegura que la fuente de iconos Material Icons está
  # incluida con tu aplicación, para que puedas usar los iconos en
  # la clase Material Icons
  uses-material-design: true  # Habilita los iconos de Material Design

  # Para añadir assets a tu aplicación, añade una sección de assets, como esta:
  assets:
    - assets/logos/  # Carpeta que contiene los assets de logos
  #   - assets/fontawesome/  # Carpeta comentada para assets de FontAwesome
  #   - images/a_dot_ham.jpeg  # Ejemplo de asset de imagen comentado

  # Un asset de imagen puede referirse a una o más variantes específicas de resolución
  # Ver https://flutter.dev/to/resolution-aware-images

  # Para detalles sobre añadir assets desde dependencias de paquetes, ver
  # https://flutter.dev/to/asset-from-package

  # Para añadir fuentes personalizadas a tu aplicación, añade una sección de fonts aquí,
  # en esta sección "flutter". Cada entrada en esta lista debe tener una
  # clave "family" con el nombre de la familia de fuentes, y una clave "fonts" con una
  # lista que da el asset y otros descriptores para la fuente. Por ejemplo:
  # fonts:
  #   - family: Schyler
  #     fonts:
  #       - asset: fonts/Schyler-Regular.ttf
  #       - asset: fonts/Schyler-Italic.ttf
  #         style: italic
  #   - family: Trajan Pro
  #     fonts:
  #       - asset: fonts/TrajanPro.ttf
  #       - asset: fonts/TrajanPro_Bold.ttf
  #         weight: 700
  #
  # Para detalles sobre fuentes desde dependencias de paquetes,
  # ver https://flutter.dev/to/font-from-package
