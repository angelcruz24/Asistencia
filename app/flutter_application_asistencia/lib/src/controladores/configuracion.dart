// Importa el paquete dart:async para trabajar con operaciones as√≠ncronas.
// Este paquete proporciona clases y funciones para manejar operaciones que toman tiempo.
import 'dart:async';
// Importa el paquete principal de Flutter para el desarrollo de interfaces de usuario.
// Material.dart proporciona widgets y herramientas esenciales para construir interfaces en Flutter.
import 'package:flutter/material.dart';
// Importa el archivo de configuraci√≥n de la aplicaci√≥n.
// Este archivo contiene configuraciones globales para la aplicaci√≥n.
import 'package:flutter_application_asistencia/config.dart';
// Importa el paquete para manejar preferencias compartidas en la aplicaci√≥n.
// SharedPreferences permite almacenar datos persistentes simples en el dispositivo.
import 'package:shared_preferences/shared_preferences.dart';
// Importa el paquete http para realizar solicitudes HTTP.
// Este paquete se usa para hacer solicitudes a servidores web.
import 'package:http/http.dart' as http; // Se importa con alias 'http' para evitar conflictos de nombres.

// Define una clase `configuracioncontroller` que maneja la l√≥gica de configuraci√≥n.
// Esta clase controla la configuraci√≥n de la direcci√≥n del servidor y la conexi√≥n.
class configuracioncontroller {
  // Controlador para el campo de texto de la direcci√≥n del servidor.
  // TextEditingController se usa para controlar el texto en un campo de entrada.
  final TextEditingController direccioncontroller = TextEditingController();
  // Variable para almacenar el protocolo (http o https).
  // Se inicializa con 'http' como valor predeterminado.
  String protocolo = 'http';
  // ValueNotifier para manejar una lista de mensajes de conexi√≥n.
  // ValueNotifier es un objeto observable que notifica a los listeners cuando su valor cambia.
  final ValueNotifier<List<String>> mensajesconexion = ValueNotifier([]);

  // Constructor de la clase.
  // Se ejecuta cuando se crea una instancia de la clase.
  configuracioncontroller() {
    // Llama al m√©todo para cargar la direcci√≥n guardada.
    _cargardireccionguardada();
  }

  // M√©todo privado para agregar un mensaje a la lista de mensajes de conexi√≥n.
  // Este m√©todo actualiza el ValueNotifier con un nuevo mensaje.
  void _agregarmensaje(String mensaje) {
    // Actualiza el valor del ValueNotifier a√±adiendo el nuevo mensaje a la lista existente.
    // El operador spread [...] copia los elementos de la lista actual.
    mensajesconexion.value = [...mensajesconexion.value, mensaje];
    // Imprime el mensaje en la consola para depuraci√≥n.
    print(mensaje);
  }

  // M√©todo privado as√≠ncrono para cargar la direcci√≥n guardada en las preferencias compartidas.
  // 'async' indica que este m√©todo puede contener operaciones as√≠ncronas.
  void _cargardireccionguardada() async {
    // Obtiene una instancia de SharedPreferences.
    // SharedPreferences es un almacenamiento simple de clave-valor persistente.
    final prefs = await SharedPreferences.getInstance();
    // Obtiene la direcci√≥n limpia guardada, usando una cadena vac√≠a si es nula.
    // El operador ?? devuelve el valor a la izquierda si no es nulo, de lo contrario, devuelve el valor a la derecha.
    final direccionlimpia = prefs.getString('direccion_limpia') ?? '';
    // Establece el texto del controlador con la direcci√≥n limpia.
    direccioncontroller.text = direccionlimpia;
    // Obtiene la URL base guardada, usando una cadena vac√≠a si es nula.
    final url = prefs.getString('base_url') ?? '';
    // Determina el protocolo basado en la URL guardada.
    if (url.startsWith('https://')) {
      protocolo = 'https'; // Si la URL comienza con 'https://', establece el protocolo a 'https'.
    } else if (url.startsWith('http://')) {
      protocolo = 'http'; // Si la URL comienza con 'http://', establece el protocolo a 'http'.
    }
  }

  // M√©todo as√≠ncrono para guardar la direcci√≥n del servidor.
  // 'async' indica que este m√©todo puede contener operaciones as√≠ncronas.
  // 'conexionexitosa' es un par√°metro opcional que indica si la conexi√≥n fue exitosa.
  Future<void> guardardireccion({bool conexionexitosa = false}) async {
    // Obtiene una instancia de SharedPreferences.
    final prefs = await SharedPreferences.getInstance();
    // Obtiene la direcci√≥n del controlador y elimina los espacios en blanco al inicio y final.
    String direccion = direccioncontroller.text.trim();
    // Guarda la direcci√≥n limpia en las preferencias compartidas.
    await prefs.setString('direccion_limpia', direccion);
    // A√±ade una barra diagonal al final de la direcci√≥n si no la tiene.
    if (!direccion.endsWith('/')) {
      direccion += '/';
    }
    // Construye la URL base usando el protocolo y la direcci√≥n.
    final url = '$protocolo://$direccion/asistencia/api/';
    // Guarda la URL base en las preferencias compartidas.
    await prefs.setString('base_url', url);
    // Guarda el estado de la conexi√≥n en las preferencias compartidas.
    await prefs.setBool('conexion_exitosa', conexionexitosa);
    // Actualiza la URL base en la configuraci√≥n de la aplicaci√≥n.
    AppConfig.baseUrl = url;
    // Agrega un mensaje indicando que la direcci√≥n fue guardada correctamente.
    _agregarmensaje('üíæ Direcci√≥n guardada correctamente.');
    // Agrega un mensaje indicando el estado de la conexi√≥n guardado.
    _agregarmensaje('üì¶ Estado de conexi√≥n guardado: $conexionexitosa');
  }

  // M√©todo para validar la direcci√≥n del servidor.
  // Este m√©todo verifica si la direcci√≥n es una IP v√°lida o un dominio v√°lido.
  bool validardireccion(String direccion) {
    // Expresi√≥n regular para validar una direcci√≥n IP con puerto opcional.
    // Ejemplo: 192.168.1.1 o 192.168.1.1:8080
    final ipregexp = RegExp(r'^(\d{1,3}\.){3}\d{1,3}(:\d+)?$');
    // Expresi√≥n regular para validar un dominio con puerto opcional.
    // Ejemplo: ejemplo.com o ejemplo.com:8080
    final domainregexp = RegExp(r'^([a-zA-Z0-9-]+\.)+[a-zA-Z]{2,}(:\d+)?$');
    // Devuelve true si la direcci√≥n coincide con alguna de las expresiones regulares.
    return ipregexp.hasMatch(direccion) || domainregexp.hasMatch(direccion);
  }

  // M√©todo as√≠ncrono para probar la conexi√≥n con el servidor.
  // 'async' indica que este m√©todo puede contener operaciones as√≠ncronas.
  Future<void> probarconexion() async {
    // Limpia los mensajes anteriores.
    mensajesconexion.value = [];
    // Obtiene la direcci√≥n del controlador y elimina los espacios en blanco al inicio y final.
    final direccion = direccioncontroller.text.trim();

    // Valida la direcci√≥n.
    if (!validardireccion(direccion)) {
      // Si la direcci√≥n no es v√°lida, agrega un mensaje de error.
      _agregarmensaje('‚ùå Direcci√≥n inv√°lida.');
      return; // Sale del m√©todo.
    }

    // Si la direcci√≥n es v√°lida, agrega un mensaje de √©xito.
    _agregarmensaje('‚úÖ Direcci√≥n v√°lida: $direccion');
    // Agrega un mensaje indicando que se est√° preparando la conexi√≥n.
    _agregarmensaje('üîß Preparando conexi√≥n...');

    // Construye la URL completa para probar la conexi√≥n.
    final urlcompleta = '$protocolo://$direccion/asistencia/api/usuariosapp.php?accion=ping';
    // Agrega un mensaje indicando que se est√° estableciendo la conexi√≥n.
    _agregarmensaje('üîå Estableciendo conexi√≥n con el servidor...');

    try {
      // Convierte la URL completa en un objeto Uri.
      final uri = Uri.parse(urlcompleta);

      // Realiza una solicitud POST a la URL.
      // http.post realiza una solicitud HTTP POST a la URL especificada.
      // headers define los encabezados de la solicitud.
      // timeout establece un tiempo m√°ximo de espera para la respuesta.
      final response = await http.post(
        uri,
        headers: {
          'Content-Type': 'application/x-www-form-urlencoded', // Tipo de contenido de la solicitud.
        },
      ).timeout(const Duration(seconds: 5)); // Tiempo m√°ximo de espera de 5 segundos.

      // Agrega un mensaje indicando que se recibi√≥ una respuesta.
      _agregarmensaje('üì° Respuesta recibida (c√≥digo ${response.statusCode})');

      // Verifica el c√≥digo de estado de la respuesta.
      if (response.statusCode == 200) {
        // Si el c√≥digo de estado es 200 (OK), guarda la direcci√≥n con conexi√≥n exitosa.
        await guardardireccion(conexionexitosa: true);
        // Agrega un mensaje indicando que la conexi√≥n fue exitosa.
        _agregarmensaje('‚úÖ Conexi√≥n exitosa. Direcci√≥n guardada.');
      } else {
        // Si el c√≥digo de estado no es 200, agrega un mensaje de error.
        _agregarmensaje('‚ö† Error HTTP: C√≥digo ${response.statusCode}');
      }
    } on TimeoutException {
      // Si ocurre un TimeoutException, agrega un mensaje de error.
      _agregarmensaje('‚è± Tiempo de espera agotado: el servidor no respondi√≥.');
    } on http.ClientException catch (e) {
      // Si ocurre un ClientException, agrega un mensaje de error con el mensaje de la excepci√≥n.
      _agregarmensaje('‚ùå Error de cliente HTTP: ${e.message}');
    } catch (e) {
      // Si ocurre cualquier otra excepci√≥n, agrega un mensaje de error con la descripci√≥n de la excepci√≥n.
      _agregarmensaje('‚ùå Error desconocido: ${e.toString()}');
    }
  }

  // M√©todo para liberar los recursos.
  // Este m√©todo se llama cuando el controlador ya no es necesario.
  void dispose() {
    // Libera los recursos del controlador de texto.
    direccioncontroller.dispose();
    // Libera los recursos del ValueNotifier.
    mensajesconexion.dispose();
  }
}
